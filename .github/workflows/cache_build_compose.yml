
name: Build with Compose 

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
    
jobs:

  build:
    runs-on: ubuntu-latest
    
    steps:
    
      - name: Check Out Repo 
        uses: actions/checkout@v2

      - name: Load Cache Keys
        uses: actions/cache@v1
        id: cache
        with:
          path: docker-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-
      
      - name: Load cached Docker layers
        run: |
          if [ -d "docker-cache" ]; then
            cat docker-cache/x* > ${{ env.tag-name }}.tar
            docker load < ${{ env.tag-name }}.tar
            rm -rf docker-cache
            rm -rf ${{ env.tag-name }}.tar
          fi
      
      - name: Build image
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          docker-compose build ${{ env.tag-name }}
          docker save ${{ env.tag-name }}:${{ env.version }} $(docker history -q ${{ env.tag-name }}:${{ env.version }} | awk '!/<missing>/{print}') > ${{ env.tag-name }}.tar
          mkdir docker-cache
          split -b 100m ${{ env.tag-name }}.tar docker-cache/x
          rm -rf ${{ env.tag-name }}.tar
#       - name: Check Out Repo 
#         uses: actions/checkout@v2

#       - name: Load Cache Keys
#         uses: actions/cache@v1
#         id: cache
#         with:
#           path: docker-cache
#           key: ${{ runner.os }}-docker-${{ github.sha }}
#           restore-keys: |
#             ${{ runner.os }}-docker-

      # - name: Set up Docker Buildx
      #   id: buildx
      #   uses: docker/setup-buildx-action@master

      # - name: Cache Docker layers
      #   uses: actions/cache@v2
      #   with:
      #     path: /tmp/.buildx-cache
      #     key: ${{ runner.os }}-buildx-${{ github.sha }}
      #     restore-keys: ${{ runner.os }}-buildx-
    
      # - name: Check Out Repo 
      #   uses: actions/checkout@v2

      # - name: Cache node modules
      #   uses: actions/cache@v2
      #   env:
      #     cache-name: cache-docker
      #   with:
      #     # npm cache files are stored in `~/.npm` on Linux/macOS
      #     path: /var/lib/docker
      #     key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/Dockerfile') }}
      #     restore-keys: |
      #       ${{ runner.os }}-build-${{ env.cache-name }}-
      #       ${{ runner.os }}-build-
      #       ${{ runner.os }}-
      
#       - name: Load layers
#         run: |
#           if [ -d "docker-cache" ]; then
#             cat docker-cache/x* > cached-layer.tar
#             docker load < cached-layer.tar
#             rm -rf docker-cache
#             rm -rf cached-layer.tar
#           fi
#       - name: Build image
#         if: steps.cache.outputs.cache-hit != 'true'
#         run: |
#           docker-compose build cached-layer
#           docker save cached-layer:latest $(docker history -q cached-layer:latest | awk '!/<missing>/{print}') > cached-layer.tar
#           mkdir docker-cache
#           split -b 100m cached-layer.tar docker-cache/x
#           rm -rf cached-layer.tar

      # - name: Docker Compose Build
      #   run: docker-compose build
      
      # - name: Docker Compose Build
      #   uses: actions/checkout@v2

      # - name: Lint Dockerfile
      #   uses: brpaz/hadolint-action@master
      #   with:
      #     dockerfile: "Dockerfile"
      - name: Hadolint
        
        uses: hadolint/hadolint-action@v1.5.0
        with:
          dockerfile: Dockerfile


      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_HUB_USERNAME }}/falcon_app:latest
#           image-ref: test_image:latest
          format: 'table'
          exit-code: '1'
          ignore-unfixed: false
          severity: 'CRITICAL'
